<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.acme</groupId>
	<artifactId>ex2a</artifactId>
	<version>1.0.0</version>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
				<configuration>
					<source>11</source>
					<target>11</target>
				</configuration>
			</plugin>
			<plugin> <!-- pour la reconnaissance des tests junit 5 lors de la phase 'test' du 
					build Maven -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.2</version>
			</plugin>
			<!-- 
			tissage (weaving) à la compilation : le code des méthodes annnotés par @Around est positionné dans les méthodes concernés dès la compilation.

			Conqéquence: 
				* @EnableAspectJAutoProxy n'est plus nécessaire sur la classe de configuration
				* l'advice n'a plus de raison d'être un bean Spring puisqu'il ne concerne désormais plus que le compilateur aspectj.

			Avantage : 
				* exécution plus rapide : le code de l'advice est greffé sur celui des joinpoints dès la compilation.
			Inconvénient : 
				* l'aspect ne profite plus des fonctionnalités offertes par Spring (injection de dépendance, exposition JMX, etc...).
			 -->
			<!-- 
			<plugin>
				<groupId>com.nickwongdev</groupId>
				<artifactId>aspectj-maven-plugin</artifactId>
				<version>1.12.1</version>
				<configuration>
					<complianceLevel>11</complianceLevel>
					<source>11</source>
					<target>11</target>
					<showWeaveInfo>true</showWeaveInfo>
					<verbose>true</verbose>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.aspectj</groupId>
						<artifactId>aspectjrt</artifactId>
						<version>1.9.4</version>
					</dependency>
					<dependency>
						<groupId>org.aspectj</groupId>
						<artifactId>aspectjtools</artifactId>
						<version>1.9.4</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			 -->
		</plugins>
	</build>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>5.2.0.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
		</dependency>

		<dependency> <!-- logback et slf4j -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.13</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.5.2</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>
